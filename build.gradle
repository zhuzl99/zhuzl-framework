buildscript {
    ext {
        springBootVersion = '2.6.3'
        springCloudVersion = '2021.0.1'
        springManagementVersion = '1.0.12.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {
    // 引入插件
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'io.github.zhuzl99'
    version = '2022.7.4-SNAPSHOT'

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
        dependencies {
            dependency "org.projectlombok:lombok:1.18.8"
            dependency "com.xuxueli:xxl-job-core:2.3.1"
        }
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    //java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    //这里一定得要。在多模块下，不然编译失败，因为不会把信赖模块给打包。
    jar {
        enabled = true
    }
    bootJar {
        enabled = false
    }
    // 发布到远程仓库
    publishing {
        publications {
            sonatype(MavenPublication) {
                groupId = "$project.group"
                artifactId = "$project.name"
                version = "$project.version"
                // 上传source，这样使用方可以看到方法注释
                artifact "build/libs/$project.name-$project.version-plain.jar"

                // 处理pom问题
                pom {
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.implementation.allDependencies.withType(ModuleDependency) {
                            ModuleDependency dp ->
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', dp.group)
                                dependencyNode.appendNode('artifactId', dp.name)
                                dependencyNode.appendNode('version', dp.version)

                                // for exclusions
                                if (!dp.excludeRules.isEmpty()) {
                                    def exclusions = dependencyNode.appendNode('exclusions')
                                    dp.excludeRules.each { ExcludeRule ex ->
                                        def exclusion = exclusions.appendNode('exclusion')
                                        exclusion.appendNode('groupId', ex.group)
                                        exclusion.appendNode('artifactId', ex.module)
                                    }
                                }
                        }

                    }
                }
            }
        }

        repositories {
            maven {
                url = version.endsWith('SNAPSHOT') ? snapshotsUrl : releaseUrl
                // 仓库用户名密码
                credentials {
                    username = susername
                    password = spassword
                }
            }
        }
    }
    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testImplementation('org.springframework.boot:spring-boot-starter-test')
    }

}

